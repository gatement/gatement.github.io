function! EscapeString (string)
	let string=a:string
	let string = escape(string, '^$.*\/~[]')
	let string = substitute(string, '\n', '\\n', 'g')
	return string
endfunction

function! GetVisual() range	" rang argument???
	let reg_save = getreg('"')
	let regtype_save = getregtype('"')
	let cb_save = &clipboard
	set clipboard&

	normal! ""gvy
	let selection = getreg('"')

	call setreg('"', reg_save, regtype_save)
	let &clipboard = cb_save

	let escaped_selection = EscapeString(selection)

	return escaped_selection
endfunction

"" pathogen
call pathogen#infect()
call pathogen#helptags()

"" remember last cursor position
set viminfo='10,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

let $LANG='en_US'
"let $LANG='zh_CN.UTF-8'
color desert
"color vividchalk
set guioptions=e
set guifont=consolas:h13
"set guifont=monaco:h16 (mvim)
set encoding=utf-8
syntax enable
set backspace=2
set nobackup
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set cindent
set number
set nocp
set is
set wrap
set ruler
"set foldmethod=indent
"set nofoldenable
set splitright
set nocompatible
set hls
filetype plugin indent on
"let Tlist_Use_Right_Window=1
let NERDTreeIgnore=['\.pyc$']
map <SPACE>t :NERDTreeToggle<CR>
map <SPACE>f :NERDTreeFind<CR>
map <SPACE>r :NERDTreeMirror<CR>
map <SPACE>l <C-w>l
map <SPACE>h <C-w>h
map <SPACE>j <C-w>j
map <SPACE>k <C-w>k
"" next tab
map <SPACE>m :tabn<CR>
"" previous tab
map <SPACE>n :tabp<CR>
"" vimerl auto complete
imap ,, <c-x><c-o>
"" save
map  ,, :w<CR>
"" close
map ,c :q<CR>
"" replace selectecd
vmap ,r <Esc>:%s/<c-r>=GetVisual()<cr>//gc<left><left><left>
"" replace word
nmap ,w ve,r
"" select all
map  ,a <Esc>GVgg
